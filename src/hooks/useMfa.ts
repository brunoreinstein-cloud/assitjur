import { supabase } from "@/integrations/supabase/client";

/**
 * Helper hook for managing Multi Factor Authentication (MFA) via TOTP.
 * Provides functions for enabling, verifying and disabling MFA using Supabase's
 * built in MFA features.
 *
 * This is a light wrapper around the Supabase SDK. Error handling is left to
 * the caller so the UI can present friendly messages when something goes wrong.
 */
export function useMfa() {
  /**
   * Initiates MFA enrollment for the current user. Returns the factor id and
   * the otpauth URI that should be displayed as a QR code to the user.
   */
  const enableMfa = async () => {
    const { data, error } = await supabase.auth.mfa.enroll({
      factorType: "totp",
    });
    if (error) throw error;
    // data.totp should contain { uri } with the otpauth URL
    return data;
  };

  /**
   * Verifies a previously enrolled MFA factor using a code generated by the
   * authenticator app. When successful, Supabase rotates the session tokens and
   * may return backup codes for account recovery.
   */
  const verifyMfa = async (factorId: string, code: string) => {
    const { data: challenge, error: challengeError } =
      await supabase.auth.mfa.challenge({
        factorId,
      });
    if (challengeError) throw challengeError;

    const { data, error } = await supabase.auth.mfa.verify({
      factorId,
      challengeId: challenge.id,
      code,
    });
    if (error) throw error;
    return data;
  };

  /**
   * Disables MFA for the current user.
   */
  const disableMfa = async (factorId: string) => {
    const { error } = await supabase.auth.mfa.unenroll({ factorId });
    if (error) throw error;
  };

  return { enableMfa, verifyMfa, disableMfa };
}
