/**
 * Strings de internacionaliza√ß√£o - Portugu√™s Brasil
 * Centralizadas para facilitar manuten√ß√£o e tradu√ß√£o
 */

export const strings = {
  // LGPD & Compliance
  lgpdNotice: 'Conte√∫do assistivo. Revis√£o humana obrigat√≥ria.',
  complianceFooter: 'Valida√ß√£o nos autos √© obrigat√≥ria. Dados tratados conforme LGPD.',
  complianceNote: 'AssistJur.IA - Conformidade LGPD e dados seguros',
  
  // Report Structure
  reportSections: {
    executiveSummary: 'üìå Resumo Executivo',
    detailedAnalysis: 'üìã An√°lise Detalhada', 
    strategicAlerts: '‚ö†Ô∏è Alertas Estrat√©gicos',
    activePole: 'üéØ Polo Ativo & Estrat√©gias',
    nextSteps: '‚û°Ô∏è Pr√≥ximos Passos'
  },
  
  // Risk Levels
  riskLevels: {
    critical: 'CR√çTICO',
    warning: 'ATEN√á√ÉO', 
    observation: 'OBSERVA√á√ÉO',
    high: 'Alto',
    medium: 'M√©dio',
    low: 'Baixo'
  },
  
  // Pattern Types
  patterns: {
    trocaDireta: 'Troca Direta',
    triangulacao: 'Triangula√ß√£o',
    duploPapel: 'Duplo Papel',
    provaEmprestada: 'Prova Emprestada',
    homonimos: 'Hom√¥nimos'
  },
  
  // Actions & Buttons
  actions: {
    export: 'Exportar',
    print: 'Imprimir',
    download: 'Baixar',
    copy: 'Copiar',
    validate: 'Validar',
    publish: 'Publicar',
    cancel: 'Cancelar',
    continue: 'Continuar',
    back: 'Voltar'
  },
  
  // Status Messages
  status: {
    loading: 'Carregando...',
    processing: 'Processando...',
    complete: 'Conclu√≠do',
    error: 'Erro',
    draft: 'Rascunho',
    published: 'Publicado',
    archived: 'Arquivado'
  },
  
  // Chat Interface
  chat: {
    placeholder: 'Descreva o que voc√™ precisa analisar...',
    thinking: 'Analisando padr√µes...',
    generating: 'Gerando relat√≥rio...',
    analysisComplete: 'An√°lise conclu√≠da',
    exportAuditLog: 'Relat√≥rio gerado por {user} √†s {timestamp}'
  },
  
  // Import Wizard
  import: {
    steps: {
      upload: 'Upload',
      validation: 'Valida√ß√£o', 
      preview: 'Pr√©via',
      publish: 'Publica√ß√£o'
    },
    compliance: {
      title: 'Compliance LGPD',
      maskedData: 'Dados mascarados: CPFs e informa√ß√µes sens√≠veis s√£o automaticamente mascarados para prote√ß√£o.',
      mandatoryValidation: 'Valida√ß√£o obrigat√≥ria: Confirma√ß√£o nos autos √© obrigat√≥ria antes de decis√µes.'
    }
  },
  
  // Validation Messages
  validation: {
    cnjPreserved: 'CNJ preservado como string original',
    dataProcessed: 'Dados processados com sucesso',
    lgpdCompliant: 'Conforme LGPD',
    auditLogged: 'Registrado no log de auditoria'
  },
  
  // Email Templates
  email: {
    welcome: {
      subject: 'Bem-vindo ao AssistJur.IA',
      greeting: 'Ol√° {name},',
      body: 'Sua conta foi criada com sucesso. Voc√™ agora tem acesso √† an√°lise avan√ßada de testemunhas.'
    },
    importComplete: {
      subject: 'Importa√ß√£o conclu√≠da - AssistJur.IA',
      body: 'Sua importa√ß√£o de dados foi processada com sucesso.'
    }
  },
  
  // Common Phrases
  common: {
    systemName: 'AssistJur.IA',
    fullName: 'AssistJur.IA - Assistente de Testemunhas',
    lastUpdate: '√öltima atualiza√ß√£o',
    version: 'Vers√£o',
    generatedBy: 'Gerado por',
    at: '√†s',
    on: 'em',
    total: 'Total',
    cases: 'casos',
    processes: 'processos',
    witnesses: 'testemunhas'
  }
} as const;

export type StringKeys = keyof typeof strings;
export type DeepStringKeys<T> = T extends string 
  ? never 
  : T extends object 
  ? {
      [K in keyof T]: K extends string
        ? T[K] extends string
          ? K
          : T[K] extends object
          ? `${K}.${DeepStringKeys<T[K]>}`
          : never
        : never;
    }[keyof T]
  : never;

export type AllStringKeys = DeepStringKeys<typeof strings>;

// Helper function to get nested string values
export function getString(key: AllStringKeys, params?: Record<string, any>): string {
  const keys = key.split('.');
  let value: any = strings;
  
  for (const k of keys) {
    value = value?.[k];
  }
  
  if (typeof value !== 'string') {
    console.warn(`String key not found: ${key}`);
    return key;
  }
  
  // Simple parameter replacement
  if (params) {
    return value.replace(/\{(\w+)\}/g, (match: string, paramKey: string) => {
      return params[paramKey] || match;
    });
  }
  
  return value;
}